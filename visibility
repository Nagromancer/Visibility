#! /usr/bin/env python3

import argparse
import datetime
import json
import sys
from math import floor

import astropy.coordinates
import astropy.coordinates.name_resolve as name_resolve
import astropy.units as u
from colorama import Fore, Style
import ephem
import matplotlib.pyplot as plt
import numpy as np
from astropy.coordinates import AltAz, EarthLocation, SkyCoord, get_sun, get_body, get_moon
from astropy.time import Time
from astropy.visualization import quantity_support
from matplotlib.legend_handler import HandlerLine2D
from matplotlib.lines import Line2D
from path import Path
from bp_lookup import get_bp_mag
from w1m_noise import get_aperture_noise


class Observatory:
    def __init__(self, name, lat, lon, height, min_alt, max_hr_angle, max_sun_alt, max_dec=None, min_dec=None,
                 max_flat=None, min_flat=None):
        self.name = name
        self.lat = lat
        self.lon = lon
        self.height = height
        self.longitude_offset = self.lon.to(u.hourangle).value
        self.max_hr_angle = max_hr_angle
        self.max_sun_alt = max_sun_alt
        self.min_alt = min_alt
        self.max_dec = 90 * u.deg if max_dec is None else max_dec
        self.min_dec = -90 * u.deg if min_dec is None else min_dec
        self.max_flat = -6 * u.deg if max_flat is None else max_flat
        self.min_flat = -10 * u.deg if min_flat is None else min_flat

    def __str__(self):
        return f"{self.name} ({self.lat}°, {self.lon}°, {self.height}m)"

    def __repr__(self):
        return self.__str__()

    def is_unobstructed(self, alt, az, times):
        # convert alt, az to hour angle, declination using the observatory's latitude
        # times are arbitrary but needed for the transformation with skycoord
        altaz = SkyCoord(alt=alt, az=az, unit='deg',
                         frame=AltAz(location=EarthLocation(lat=self.lat, lon=self.lon, height=self.height),
                                     obstime=times))
        hr = altaz.transform_to(astropy.coordinates.HADec).ha.value
        dec = altaz.transform_to(astropy.coordinates.HADec).dec.value

        # check if min_alt has len attribute
        if hasattr(self.min_alt.value, '__len__'):
            min_alts = np.array(self.min_alt.to('deg').value)
            min_azs = np.linspace(0, 360, len(min_alts))
            min_alt = np.interp(az, min_azs, min_alts)
            safe_alt = alt > min_alt
            safe_hr = np.abs(hr) < self.max_hr_angle.value
            return safe_alt & safe_hr
        else:
            safe_alt = alt > self.min_alt.to('deg').value
            safe_hr = np.abs(hr) < self.max_hr_angle.value
            safe_dec = (self.min_dec.to('deg').value < dec) & (dec < self.max_dec.to('deg').value)
            return safe_alt & safe_hr & safe_dec


twist_min_alts = np.array(
    [63, 63, 63, 62, 59, 53, 44, 35, 36, 36, 36, 35, 32, 30, 31, 37, 39, 40, 40, 40, 38, 36, 34, 23, 25, 27, 28, 30, 29,
     28, 26, 38, 50, 56, 59, 62, 63]) * u.deg

twist = Observatory("Twenty Inch Survey Telescope", 28.760255 * u.deg, -17.879284 * u.deg, 2348 * u.m, twist_min_alts,
                    6 * u.hourangle, -12 * u.deg)
w1m = Observatory("Warwick One Metre Telescope", 28.760255 * u.deg, -17.879284 * u.deg, 2348 * u.m, 30 * u.deg,
                  66.9 / 15 * u.hourangle, -12 * u.deg, 89 * u.deg, -20 * u.deg)
INT = Observatory("Isaac Newton Telescope", 28.760255 * u.deg, -17.879284 * u.deg, 2396 * u.m, 33 * u.deg,
                  6 * u.hourangle, -18 * u.deg)
ngts = Observatory("Next Generation Transit Survey", -24.615752 * u.deg, -70.391029 * u.deg, 2433 * u.m, 30 * u.deg,
                   5.3 * u.hourangle, -15 * u.deg)
tmo = Observatory("Tom Marsh Observatory", 52.376876 * u.deg, -1.567203 * u.deg, 93 * u.m, 30 * u.deg,
                  4.5 * u.hourangle, -12 * u.deg)

observatories = {
    'twist': twist,
    'ngts': ngts,
    'tmo': tmo,
    'w1m': w1m,
    'int': INT
}


def errorcode(API, message):
    """Function to colour code error messages within a code.

    Parameters
    ----------
    API : str
       Which API to use: [software, module, message, warning, error]
    message : str
       Message to add to API

    Return
    ------
    Error message written to bash
    """
    if API == 'software':
        print(Style.BRIGHT + Fore.MAGENTA + message + Style.RESET_ALL)
    if API == 'module':
        print(Style.BRIGHT + Fore.GREEN + message + Style.RESET_ALL)
    if API == 'message':
        print(Style.BRIGHT + message + Style.RESET_ALL)
    if API == 'warning':
        print(Style.BRIGHT + Fore.YELLOW + message + Style.RESET_ALL)
    if API == 'error':
        print(Style.BRIGHT + Fore.RED + '[Error]: ' + message + Style.RESET_ALL)
        sys.exit()


def update_handle(handle, orig):
    handle.update_from(orig)
    handle.set_alpha(1)


def main(args):
    quantity_support()
    plot = args.plot
    observing_date = datetime.datetime.now().strftime("%d/%m/%Y") if args.date is None else args.date
    # check for yyyymmdd format
    if len(observing_date) == 8 and observing_date.isdigit():
        observing_date = f"{observing_date[6:]}/{observing_date[4:6]}/{observing_date[:4]}"

    # set the observatory object based on the command line argument
    obs = observatories[args.observatory]

    # string length for neat formatting so the table is aligned
    str_length = max(27 + max(len(targ) for targ in args.targets), 38)

    # set the observing date
    try:
        observing_date = f"{observing_date.split('/')[0].zfill(2)}/{observing_date.split('/')[1].zfill(2)}/{observing_date.split('/')[2] if len(observing_date.split('/')[2]) == 4 else '20' + observing_date.split('/')[2]}"
    except IndexError:
        errorcode("error", f"Invalid observing date: {observing_date} (usage: --date dd/mm/yyyy or --date d/m/yy)")
        exit()
    formatted_date = f"{observing_date.split('/')[2]}-{observing_date.split('/')[1]}-{observing_date.split('/')[0]}"  # YYYY-MM-DD for the date lookup
    reverse_date = formatted_date.replace('-', '')  # YYYYMMDD for the json file name

    # set the observing time. use longitude offset to ensure times cover the whole night - start/end is during the day
    try:
        utc_midnight = Time(f'{formatted_date} 23:59:00') + 1 * u.min
    except ValueError:
        errorcode("error", f"Invalid observing date: {observing_date} (usage: --date dd/mm/yyyy or --date yyyymmdd)")
        exit()
    delta_midnight = np.linspace(-12 - obs.longitude_offset, 12 - obs.longitude_offset,
                                 1441) * u.hour  # One minute intervals
    # round down to the nearest minute
    delta_midnight = np.round(delta_midnight.to('min'), 0).to('hour')
    times = utc_midnight + delta_midnight

    # set the observing site
    obs_site = EarthLocation(lat=obs.lat, lon=obs.lon, height=obs.height)
    obs_site_ephem = ephem.Observer()
    frame = AltAz(obstime=times, location=obs_site)

    # get the sun and moon positions
    sunaltaz = get_sun(times).transform_to(frame)
    moonaltaz = get_body("moon", times).transform_to(frame)
    solar_midnight = (times[sunaltaz.alt.argmin()] - utc_midnight).to('hr')
    astro_twilight_start = (times[sunaltaz.alt < -12 * u.deg][0] - utc_midnight).to('hr')
    astro_twilight_end = (times[sunaltaz.alt < -12 * u.deg][-1] - utc_midnight).to('hr')

    # get moon_rise and moon_set times
    idx_rise = np.where((moonaltaz.alt[:-1] < 0) & (moonaltaz.alt[1:] >= 0))[0]
    if len(idx_rise) == 0:
        print("Moon does not rise in this time range.")
        moonrise_time = None
    else:
        i = idx_rise[0]
        # Linear interpolation to find the crossing time
        t0, t1 = times[i], times[i + 1]
        a0, a1 = moonaltaz.alt[i], moonaltaz.alt[i + 1]

        # Fraction of time between t0 and t1 where altitude crosses 0
        frac = -a0 / (a1 - a0)
        moonrise_time = t0 + (t1 - t0) * frac
    idx_set = np.where((moonaltaz.alt[:-1] > 0) & (moonaltaz.alt[1:] <= 0))[0]
    if len(idx_set) == 0:
        print("Moon does not set in this time range.")
        moonset_time = None
    else:
        i = idx_set[0]
        # Linear interpolation to find the crossing time
        t0, t1 = times[i], times[i + 1]
        a0, a1 = moonaltaz.alt[i], moonaltaz.alt[i + 1]

        # Fraction of time between t0 and t1 where altitude crosses 0
        frac = -a0 / (a1 - a0)
        moonset_time = t0 + (t1 - t0) * frac

    flat_time = sunaltaz.alt < -4 * u.deg
    flat_start = times[flat_time][0]
    flat_end = times[flat_time][-1]

    # get the moon illumination percentage
    moon = ephem.Moon()
    obs_site_ephem.lat = obs_site.lat.value
    obs_site_ephem.lon = obs_site.lon.value
    obs_site_ephem.elevation = obs_site.height.value
    obs_site_ephem.date = ephem.Date((utc_midnight + solar_midnight).datetime)
    moon.compute(obs_site_ephem)
    moon_illumination = moon.moon_phase * 100

    # print the observing date and moon illumination
    colour_code_colours = [Fore.BLUE, Fore.GREEN, Fore.YELLOW, Fore.RED]
    illum_colour = colour_code_colours[next(i for i, v in enumerate([25, 50, 75, 100]) if v >= moon_illumination)]
    errorcode("software", f"Observing date: {observing_date} (night of)")
    print(
        Style.BRIGHT + f"{'Moon illumination at solar midnight:':<{str_length}} " + illum_colour + f"{moon_illumination:.0f}%" + Style.RESET_ALL)
    print(
        Style.BRIGHT + f"{'Moon up from:':<{str_length}} " + f"{(moonrise_time).strftime('%H:%M') if moonrise_time is not None else '-'} to {(moonset_time).strftime('%H:%M') if moonset_time is not None else '-'}" + Style.RESET_ALL)
    print("")

    # get the targets and their coordinates, regardless of whether they are named or given as coordinates
    sky_coordinates = []
    targets = []
    g_bp_mags = []
    idx = 0
    names = args.names
    unnamed_targets = False
    while idx < len(args.targets):
        try:
            # check if each of ra and dec strings contain two colons
            if args.targets[idx].count(':') == 2:
                ra_sex = [float(num) for num in args.targets[idx].split(':')]
                ra = 15 * ra_sex[0] + 15 * 60 ** -1 * ra_sex[1] + 15 * 3600 ** -1 * ra_sex[2]
            else:
                ra = float(args.targets[idx])
            if args.targets[idx + 1].count(':') == 2:
                dec_sex = [float(num) for num in args.targets[idx + 1].split(':')]
                dec = dec_sex[0] + 60 ** -1 * dec_sex[1] + 3600 ** -1 * dec_sex[2]
            else:
                dec = float(args.targets[idx + 1])

            sky_coordinates += [SkyCoord(ra=ra, dec=dec, unit='deg')]
            if names is not None and len(args.names) > 0:
                targets.append(names.pop(0))
            else:
                targets.append(f"Target {len(targets) + 1}")
                unnamed_targets = True
            idx += 2
            continue
        except ValueError as e:
            try:
                sky_coordinates.append(get_body(args.targets[idx], times))
                targets.append(args.targets[idx])
                g_bp_mags.append(None)
                idx += 1
                continue
            except KeyError:
                try:
                    sky_coordinates.append(SkyCoord.from_name(args.targets[idx]))
                    targets.append(args.targets[idx])
                    # get gaia bp mag
                    g_bp_mags.append(get_bp_mag(args.targets[idx]))
                    idx += 1
                    continue
                except name_resolve.NameResolveError:
                    try:
                        sky_coordinates.append(SkyCoord.from_name(args.targets[idx].replace(' ', '')))
                        targets.append(args.targets[idx])
                        g_bp_mags.append(get_bp_mag(args.targets[idx].replace(' ', '')))
                        idx += 1
                        continue
                    except name_resolve.NameResolveError:
                        try:
                            sky_coordinates.append(SkyCoord.from_name(args.targets[idx].replace(' ', '-')))
                            targets.append(args.targets[idx])
                            g_bp_mags.append(get_bp_mag(args.targets[idx].replace(' ', '-')))
                            idx += 1
                            continue
                        except name_resolve.NameResolveError:
                            errorcode("error", f"Target {args.targets[idx]} not found")
    if len(targets) == 0:
        errorcode("error", "No targets found")
        exit()

    # work out the lunar separation at flat times
    try:
        evening_flat_start = times[sunaltaz.alt < obs.max_flat][0]
        morning_flat_end = times[sunaltaz.alt < obs.min_flat][-1]
        # get the sun alt-az at these times
        sunaltaz_evening_flat_start = get_sun(evening_flat_start).transform_to(
            AltAz(obstime=evening_flat_start, location=obs_site))
        sunaltaz_morning_flat_start = get_sun(morning_flat_end).transform_to(
            AltAz(obstime=morning_flat_end, location=obs_site))
        moonaltaz_evening_flat_start = get_body("moon", evening_flat_start).transform_to(
            AltAz(obstime=evening_flat_start, location=obs_site))
        moonaltaz_morning_flat_start = get_body("moon", morning_flat_end).transform_to(
            AltAz(obstime=morning_flat_end, location=obs_site))
        evening_flat_az = (sunaltaz_evening_flat_start.az.deg + 180) % 360 * u.deg
        morning_flat_az = (sunaltaz_morning_flat_start.az.deg + 180) % 360 * u.deg
        morning_flat_alt = evening_flat_alt = 75 * u.deg
        evening_flat_alt_az = AltAz(alt=evening_flat_alt, az=evening_flat_az, location=obs_site,
                                    obstime=evening_flat_start)
        morning_flat_alt_az = AltAz(alt=morning_flat_alt, az=morning_flat_az, location=obs_site,
                                    obstime=morning_flat_end)
        # get the lunar separation at these times
        moon_sep_evening_flat_start = moonaltaz_evening_flat_start.separation(evening_flat_alt_az).value
        moon_sep_morning_flat_start = moonaltaz_morning_flat_start.separation(morning_flat_alt_az).value
        flat_separation_limit = 30  # degrees
        print(Style.BRIGHT + f"{'Evening/morning flat lunar separation:':<{str_length}}" +
              (Fore.RED if moon_sep_evening_flat_start < flat_separation_limit else Fore.GREEN) +
              f" {moon_sep_evening_flat_start:.1f}°" + Style.RESET_ALL + Style.BRIGHT + " / " + Style.BRIGHT +
              (Fore.RED if moon_sep_morning_flat_start < flat_separation_limit else Fore.GREEN) +
              f"{moon_sep_morning_flat_start:.1f}°" + Style.RESET_ALL)

    except IndexError:
        if args.json is None:
            errorcode("warning", "No evening or morning flat time")
        else:
            errorcode("error", "No evening or morning flat time - aborting")
            exit()

    # get the target alt-az at these times and the lunar separations
    targaltazs = [sky_coordinate.transform_to(frame) for sky_coordinate in sky_coordinates]
    moon_seps = [targaltaz.separation(moonaltaz).value for targaltaz in targaltazs]

    # display the night + twilight lengths
    errorcode("message",
              f'{"Night + astronomical twilight length:":<{str_length}} '
              f"{str(floor((astro_twilight_end - astro_twilight_start).value)).zfill(2)}h {str(floor(((astro_twilight_end - astro_twilight_start).value % 1) * 60)).zfill(2)}m"
              f" - from {(utc_midnight + astro_twilight_start).strftime('%H:%M')} to {(utc_midnight + astro_twilight_end).strftime('%H:%M')}")
    try:
        night_start = (times[sunaltaz.alt < -18 * u.deg][0] - utc_midnight).to('hr')
        night_end = (times[sunaltaz.alt < -18 * u.deg][-1] - utc_midnight).to('hr')
        errorcode("message",
                  f"{'Night length:':<{str_length}} {str(floor((night_end - night_start).value)).zfill(2)}h {str(floor(((night_end - night_start).value % 1) * 60)).zfill(2)}m"
                  f" - from {(utc_midnight + night_start).strftime('%H:%M')} to {(utc_midnight + night_end).strftime('%H:%M')}")
    except IndexError:
        errorcode("warning", f"{'Night length:':<{str_length}} Not on this date")

    errorcode("software", "\nVisibility:")

    # display the target altitudes/airmasses vs time - initial plot setup
    if plot:
        plt.rcParams['figure.dpi'] = 100
        plt.rcParams["font.size"] = 18
        plt.rcParams['legend.fontsize'] = 14
        plt.figure(figsize=(12, 8))
        plt.grid()
        plt.title(f"Night of {observing_date}", y=1.05)
        plt.plot(delta_midnight, sunaltaz.alt, color='yellow', ls='--', label='Sun')
        plt.plot(delta_midnight, moonaltaz.alt, color=[0.75] * 3, ls='--', label='Moon')
        plt.fill_between(delta_midnight, -90 * u.deg, 90 * u.deg, color='#87ceeb', zorder=0, alpha=1)
        plt.fill_between(delta_midnight, -90 * u.deg, 90 * u.deg, sunaltaz.alt < 0 * u.deg, color='#000000', zorder=0,
                         alpha=0.3)
        plt.fill_between(delta_midnight, -90 * u.deg, 90 * u.deg, sunaltaz.alt < -6 * u.deg, color='#000000', zorder=0,
                         alpha=0.45)
        plt.fill_between(delta_midnight, -90 * u.deg, 90 * u.deg, sunaltaz.alt < -12 * u.deg, color='#000000', zorder=0,
                         alpha=0.6)
        plt.fill_between(delta_midnight, -90 * u.deg, 90 * u.deg, sunaltaz.alt < -18 * u.deg, color='#000000', zorder=0,
                         alpha=0.9)

    # loop over the targets and display their visibility
    obs_starts = []
    obs_ends = []
    for target, targaltaz, moon_sep, sky_coordinate, g_bp_mag in zip(targets, targaltazs, moon_seps, sky_coordinates,
                                                                     g_bp_mags):
        alt = targaltaz.alt.value
        az = targaltaz.az.value
        visibility = obs.is_unobstructed(alt, az, times)
        above_min_alt = visibility
        dark_time = sunaltaz.alt < obs.max_sun_alt
        if isinstance(sky_coordinate.dec.value, float):
            dec = sky_coordinate.dec.value
            ra = sky_coordinate.ra.value
            ss = False
        else:
            dec = sky_coordinate.dec.value[0]
            ra = sky_coordinate.ra.value[0]
            ss = True

        pm = '+' if dec > 0 else '-'
        dec_str = pm + f"{abs(dec):.5f}°".zfill(9)
        ra_str = f"{ra:.5f}°".zfill(10)
        target_out_str = f'{f"{target} ":<{str_length - 26}}' f'{f"({ra_str}, {dec_str}):":<{26}}'
        if np.any(above_min_alt & dark_time):
            target_start = times[above_min_alt & dark_time][0]
            obs_starts.append(target_start)
            target_end = times[above_min_alt & dark_time][-1]
            obs_ends.append(target_end)
            target_up_moon_sep = moon_sep[above_min_alt & dark_time]
            obs_time_hours = (target_end - target_start).value * 24
            obs_time_colour = colour_code_colours[::-1][
                next(i for i, v in enumerate([2, 4, 6, 10]) if v >= obs_time_hours)]
            # calculate the mean cube airmass while the target is up
            mean_cube_airmass = np.mean((1 / np.cos(np.radians(90 - alt[above_min_alt & dark_time]))) ** 3)
            mean_lunar_sep = np.mean(target_up_moon_sep)
            lunar_sep_colour = colour_code_colours[::-1][
                next(i for i, v in enumerate([30, 60, 90, 180]) if v >= mean_lunar_sep)]
            print(Style.BRIGHT +
                  f"{target_out_str} " +
                  obs_time_colour +
                  f"{str(floor((target_end - target_start).value * 24)).zfill(2)}h"
                  f" {str(floor(((target_end - target_start).value * 24 % 1) * 60)).zfill(2)}m" +
                  Style.RESET_ALL + Style.BRIGHT +
                  f" - from {target_start.strftime('%H:%M')} to {target_end.strftime('%H:%M')} - """
                  f"Mean lunar separation: " +
                  lunar_sep_colour +
                  f"{mean_lunar_sep:.1f}°"
                  + Style.RESET_ALL)
            if g_bp_mag is not None:
                g_bp_mag_colour = colour_code_colours[next(i for i, v in enumerate([13, 15, 18, 24]) if v >= g_bp_mag)]
                print(Style.BRIGHT + f" - Gaia BP mag: " + g_bp_mag_colour + f"{g_bp_mag:.2f}" + Style.RESET_ALL)
                if obs == w1m:
                    predicted_noise = get_aperture_noise(moon_illumination, mean_cube_airmass, g_bp_mag)
                    print(
                        Style.BRIGHT + f" - Predicted white noise: {predicted_noise:.0f} ppm in one hour" + Style.RESET_ALL)
        else:
            if ss:
                errorcode("warning", f"{target_out_str} is a solar system object not visible on this night.")
            else:
                if np.any(above_min_alt):
                    try:
                        target_start = times[np.where(np.diff(above_min_alt.astype(int)) == 1)[0][0]]
                        target_end = times[np.where(np.diff(above_min_alt.astype(int)) == -1)[0][0]]
                        print(
                            Style.BRIGHT + target_out_str + Fore.YELLOW + f' is not visible on this night - unobstructed between {target_start.strftime("%H:%M")} and {target_end.strftime("%H:%M")}' + Style.RESET_ALL)
                        if g_bp_mag is not None:
                            g_bp_mag_colour = colour_code_colours[
                                next(i for i, v in enumerate([13, 15, 18, 24]) if v >= g_bp_mag)]
                            print(
                                Style.BRIGHT + f" - Gaia BP mag: " + g_bp_mag_colour + f"{g_bp_mag:.2f}" + Style.RESET_ALL)
                            mean_cube_airmass = np.mean(
                                (1 / np.cos(np.radians(90 - alt[above_min_alt]))) ** 3)
                            if obs == w1m:
                                predicted_noise = get_aperture_noise(0.5, mean_cube_airmass, g_bp_mag)
                                print(
                                    Style.BRIGHT + f" - Predicted white noise: {predicted_noise:.0f} ppm in one hour" + Style.RESET_ALL)
                    except IndexError:
                        print(
                            Style.BRIGHT + target_out_str + Fore.YELLOW + f" is not visible on this date" + Style.RESET_ALL)
                else:
                    print(
                        Style.BRIGHT + target_out_str + Fore.RED + f" is never visible from the {obs.name}" + Style.RESET_ALL)

        # plot the visibility, showing the azimuth as cardinal directions
        if plot:
            sc = plt.scatter(delta_midnight, targaltaz.alt, label=target, s=1,
                             alpha=[1 if is_v and is_night else 0.2 for is_v, is_night in zip(visibility, dark_time)])
            color = list(sc.get_facecolor()[0])[:3]
            lat_diff = dec - obs_site.lat.value
            for i, vis in zip(range(len(times) - 1), visibility[:-2]):
                alpha = 1 if vis and dark_time[i] else 0.2
                plot_color = color + [alpha]
                if ((az[i]) > 350) and ((az[i + 1]) < 10) or ((az[i]) < 10) and ((az[i + 1]) > 350):
                    plt.annotate("N", (delta_midnight[i], targaltaz.alt[i]),
                                 xytext=(delta_midnight[i], targaltaz.alt[i] + 1 * u.deg), ha='center', va='bottom',
                                 color=plot_color)
                    continue
                if (az[i] > 90) and (az[i + 1] < 90) or (az[i] < 90) and (az[i + 1] > 90):
                    plt.annotate("E", (delta_midnight[i], targaltaz.alt[i]),
                                 xytext=(delta_midnight[i], targaltaz.alt[i] + 1 * u.deg), ha='center', va='bottom',
                                 color=plot_color)
                if (az[i] > 270) and (az[i + 1] < 270) or (az[i] < 270) and (az[i + 1] > 270):
                    plt.annotate("W", (delta_midnight[i], targaltaz.alt[i]),
                                 xytext=(delta_midnight[i], targaltaz.alt[i] + 1 * u.deg), ha='center', va='bottom',
                                 color=plot_color)
                if (az[i] > 180) and (az[i + 1] < 180) or (az[i] < 180) and (az[i + 1] > 180):
                    plt.annotate("S", (delta_midnight[i], targaltaz.alt[i]),
                                 xytext=(delta_midnight[i], targaltaz.alt[i] + 1 * u.deg), ha='center', va='bottom',
                                 color=plot_color)
                if not -10 < lat_diff < 0:
                    if (az[i] > 135) and (az[i + 1] < 135) or (az[i] < 135) and (az[i + 1] > 135):
                        plt.annotate("SE", (delta_midnight[i], targaltaz.alt[i]),
                                     xytext=(delta_midnight[i], targaltaz.alt[i] + 1 * u.deg), ha='center', va='bottom',
                                     color=plot_color)
                    if (az[i] > 225) and (az[i + 1] < 225) or (az[i] < 225) and (az[i + 1] > 225):
                        plt.annotate("SW", (delta_midnight[i], targaltaz.alt[i]),
                                     xytext=(delta_midnight[i], targaltaz.alt[i] + 1 * u.deg), ha='center', va='bottom',
                                     color=plot_color)
                    if (az[i] > 247.5) and (az[i + 1] < 247.5) or (az[i] < 247.5) and (
                            az[i + 1] > 247.5):
                        plt.annotate("WSW", (delta_midnight[i], targaltaz.alt[i]),
                                     xytext=(delta_midnight[i], targaltaz.alt[i] + 1 * u.deg), ha='center', va='bottom',
                                     color=plot_color)
                    if (az[i] < 112.5) and (az[i + 1] > 112.5) or (az[i] > 112.5) and (
                            az[i + 1] < 112.5):
                        plt.annotate("ESE", (delta_midnight[i], targaltaz.alt[i]),
                                     xytext=(delta_midnight[i], targaltaz.alt[i] + 1 * u.deg), ha='center', va='bottom',
                                     color=plot_color)
                if not 0 < lat_diff < 10:
                    if (az[i] > 315) and (az[i + 1] < 315) or (az[i] < 315) and (az[i + 1] > 315):
                        plt.annotate("NW", (delta_midnight[i], targaltaz.alt[i]),
                                     xytext=(delta_midnight[i], targaltaz.alt[i] + 1 * u.deg), ha='center', va='bottom',
                                     color=plot_color)
                    if (az[i] > 67.5) and (az[i + 1] < 67.5) or (az[i] < 67.5) and (az[i + 1] > 67.5):
                        plt.annotate("ENE", (delta_midnight[i], targaltaz.alt[i]),
                                     xytext=(delta_midnight[i], targaltaz.alt[i] + 1 * u.deg), ha='center', va='bottom',
                                     color=plot_color)
                    if (az[i] > 45) and (az[i + 1] < 45) or (az[i] < 45) and (az[i + 1] > 45):
                        plt.annotate("NE", (delta_midnight[i], targaltaz.alt[i]),
                                     xytext=(delta_midnight[i], targaltaz.alt[i] + 1 * u.deg), ha='center', va='bottom',
                                     color=plot_color)
                    if (az[i] > 292.5) and (az[i + 1] < 292.5) or (az[i] < 292.5) and (
                            az[i + 1] > 292.5):
                        plt.annotate("WNW", (delta_midnight[i], targaltaz.alt[i]),
                                     xytext=(delta_midnight[i], targaltaz.alt[i] + 1 * u.deg), ha='center', va='bottom',
                                     color=plot_color)
        print("")
    # Plot the sun and moon and finish the plot
    if plot:
        leg = plt.legend()
        new_leg = []
        for lh in leg.legend_handles:
            if lh.get_label() != 'Sun' and lh.get_label() != 'Moon':
                lh = Line2D([], [], color=lh.get_facecolor()[0], label=lh.get_label(), linestyle='-')
                new_leg.append(lh)
            else:
                new_leg.append(lh)
            if lh.get_label() == 'Moon':
                lh.set_label(f'{lh.get_label()} ({moon_illumination:.0f}%)')
        if len(new_leg) == 2:
            errorcode("error", "No targets visible - cannot plot")
            exit()

        plt.legend(handles=new_leg, bbox_to_anchor=(1, 1), loc='upper right', borderaxespad=0.,
                   handler_map={Line2D: HandlerLine2D(update_func=update_handle)})

        plt.xlim(solar_midnight - 9 * u.hour, solar_midnight + 9 * u.hour)
        plt.ylim(0 * u.deg, 90 * u.deg)
        labels = plt.gca().get_xticks().tolist()[1:-1]
        labels = [(utc_midnight + int(label) * u.hour).strftime('%H:%M') for label in labels]
        ticks = plt.gca().get_xticks().tolist()[1:-1]
        plt.gca().set_xticks(ticks)
        plt.gca().set_xticklabels(labels)
        plt.xlabel('Time (UTC)')
        plt.ylabel('Altitude')
        alt_tick_labels = plt.gca().get_yticks().tolist()
        ax2 = plt.gca().twinx()
        air_tick_labels = [f'{1 / np.cos(np.radians(90 - alt_tick_label)):.2f}' for alt_tick_label in alt_tick_labels]
        air_tick_labels[0] = ''
        ax2.set_yticks(alt_tick_labels)
        ax2.set_yticklabels(air_tick_labels)
        ax2.set_ylabel('Airmass')

        plt.tight_layout()
        plt.show()

    # Create json file
    if args.json is not None:
        errorcode("software", "Creating json file...")
        # currently only works for w1m
        if obs != w1m:
            errorcode("error", "Can only create json file for W1m")
            exit()
        # do not allow if ss objects are present
        if np.any([isinstance(sky_coordinate.dec.value, np.ndarray) for sky_coordinate in sky_coordinates]):
            errorcode("error", "Solar system objects present - cannot create json file")
            exit()
        if unnamed_targets:
            errorcode("error", "Unnamed targets present - cannot create json file")
            exit()
        out_path = Path(args.json) / f'{reverse_date}.json'
        dome_open = flat_start - 2 * u.min
        dome_close = flat_end + 2 * u.min

        night = formatted_date
        dome = {
            "open": str(dome_open.iso).replace(" ", "T").split(".")[0] + "Z",
            "close": str(dome_close.iso).replace(" ", "T").split(".")[0] + "Z",
        }
        if moon_sep_evening_flat_start > flat_separation_limit:
            actions = [
                {
                    "type": "SkyFlats",
                    "evening": True,
                    "pipeline": {
                        "prefix": "evening-flat"
                    },
                    "blue": {"bin": [2, 2]}
                }
            ]
        else:
            errorcode("warning", "Moon too close to evening flat field - skipping evening flats")
            actions = []
        for target, sky_coordinate, target_start, target_end in zip(targets, sky_coordinates, obs_starts, obs_ends):
            actions += [
                {
                    "type": "AutoFocus",
                    "start": str((target_start - 4 * u.min).iso).replace(" ", "T").split(".")[0] + "Z",
                    "blue": {
                        "exposure": 5,
                    },
                    "expires": str(dome_close.iso).replace(" ", "T").split(".")[0] + "Z"
                },
                {
                    "type": "ObserveTimeSeries",
                    "start": str(target_start.iso).replace(" ", "T").split(".")[0] + "Z",
                    "end": str(target_end.iso).replace(" ", "T").split(".")[0] + "Z",
                    "ra": round(sky_coordinate.ra.value, 5),
                    "dec": round(sky_coordinate.dec.value, 5),
                    "blind_offset_dra": 0.25,
                    "blind_offset_ddec": 0,
                    "guide_camera": "blue",
                    "pipeline": {
                        "object": target,
                        "prefix": target.replace(" ", "_"),
                    },
                    "blue": {
                        "exposure": 30,
                        "bin": [2, 2]
                    }
                }
            ]
        if moon_sep_morning_flat_start > flat_separation_limit:
            actions += [
                {
                    "type": "SkyFlats",
                    "evening": False,
                    "pipeline": {
                        "prefix": "morning-flat"
                    },
                    "blue": {"bin": [2, 2]}
                }
            ]
        else:
            errorcode("warning", "Moon too close to morning flat field - skipping morning flats")
        json_dict = {
            "night": night,
            "dome": dome,
            "actions": actions
        }
        out_path.write_text(json.dumps(json_dict, indent=2))

        # print the FULL output path (not relative)
        errorcode("message", f"JSON file saved to {out_path.abspath()}")


if __name__ == '__main__':
    sys.argv = [f" {arg}" if (arg.startswith("-") and arg.count(':') == 2) else arg for arg in sys.argv]

    parser = argparse.ArgumentParser(description='Calculate visibility of targets from TWIST, NGTS or TMO.')

    parser.add_argument('observatory', type=str, choices=['twist', 'ngts', 'tmo', 'INT', 'w1m'],
                        help='Observatory to calculate visibility for')
    parser.add_argument('targets', type=str, nargs='+',
                        help='target(s) (or hh:mm:ss ±dd:mm:ss / ddd.dddd ±dd.dddd) to check visibility for')
    parser.add_argument('--names', type=str, nargs='+', help='name(s) of target(s) - used if RA/Dec given')
    parser.add_argument('--plot', action='store_true', help='Plot visibility (default: False)')
    parser.add_argument('--date', type=str, default=None, metavar='dd/mm/yyyy or d/m/yy or yyyymmdd',
                        help='Observing date (default: today)')
    parser.add_argument('--json', type=str, default=None, metavar='output/directory',
                        help='Directory to save json file to (default: no json file)')

    args = parser.parse_args()
    main(args)
